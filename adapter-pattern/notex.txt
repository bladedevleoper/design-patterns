Adapter Pattern Notes:
----------------------

# The adapter pattern is probably one of the easiest patterns to learn.

Adapter Pattern definition:
---------------------------

- In software engineering, the adapter pattern is a software design pattern that allows the interface of an existing class to be used from another interface.
- It is often used to make existing classes work with others without modifying their source code.



---------------------------------------------------------------------------

Reason why to use the Adapter Pattern?
--------------------------------------
- it is often used to take existing classes and make them work with other classes without modifying their source code.

Some Scenarios:
---------------
-  Most uses is taking a third party class and using the adapter pattern to create your own wrapper for the class.

---------------------------------------------------------------------------

So with the adapter pattern, we would want to create an interface for the type of things we want to do.


- An adapter is taking a class and providing a wrapper for it. The wrapper will then lay over the existing class (i.e. Youtube class example),
- So we can then perform our own methods to interact with the existing class methods.
- This is achieved by doing an interface, where we define the methods we want to use.
- we then create a class to implement that interface.


3rd Party Class:
----------------

```
/*
    - This would be some dependency pulled in from composer.
    - issue here is that the person who is maintaining the package could change a method name or
    - change the functionality of a method
*/

class YouTube
{
    public function getVideoViewCounts($id)
    {
        return 5000;
    }
}


```


The Adapter Interface:
----------------------

/*
    - Interfaces are created to bind a contract with the class with the methods we want that class to use.
    - Here we can then define the methods we want to implement.
    - We will then use the interface to implement a wrapper class which then becomes the adapter for the 3rd party class.

    Naming convention:
    <ServiceName>AdapterInterface

    #side notes:
    - only public methods within interfaces
    - no properties
*/


interface ServiceAdapterInterface
{

    public function getVideoCount($id);

}



The wrapper class:
------------------

/*
    - the wrapper class will now implement the adapter interface.
    - the wrapper will then use the methods that are within the interface.
    - the wrapper class will have a constructor type hinted to the 3rd party class, which we will accept the 3rd party object
      through dependency injection.
    - The wrapper class will have a protected property, which will then be assigned the 3rd party object through the constructor.
    - We can interact with that object and use our methods to call the 3rd party object methods.


    Wrapper Naming Convention:
        <ServiceName>Adapter
*/


class YouTubeAdapter implements ServiceAdapterInterface
{

    protected $service;

    public function __construct(YouTube $service)
    {

        $this->service = $service;
    }


    public function getVideoCount($id)
    {

        return $this->service->getVideoViewCounts($id);

    }

}


